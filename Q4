#include <iostream>
#include <sstream>
#include <string>

using namespace std;


struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Codec {
public:

 
    string serialize(TreeNode* root) {
        if (!root) return "X,";
        return to_string(root->val) + "," + serialize(root->left) + serialize(root->right);
    }

  
    TreeNode* deserialize(string data) {
        stringstream ss(data);
        return deserializeHelper(ss);
    }

private:
    TreeNode* deserializeHelper(stringstream& ss) {
        string val;
        getline(ss, val, ',');
        if (val == "X") return NULL;
        TreeNode* node = new TreeNode(stoi(val));
        node->left = deserializeHelper(ss);
        node->right = deserializeHelper(ss);
        return node;
    }
};

void printTree(TreeNode* node) {
    if (!node) return;
    cout << node->val << " ";
    printTree(node->left);
    printTree(node->right);
}

int main() {
    Codec codec;

    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->right->left = new TreeNode(4);
    root->right->right = new TreeNode(5);

  
    string serializedTree = codec.serialize(root);
    cout << "Serialized tree: " << serializedTree << endl;


    TreeNode* deserializedRoot = codec.deserialize(serializedTree);

  
    cout << "Deserialized tree: ";
    printTree(deserializedRoot);
    cout << endl;

    return 0;
}
