#include <algorithm>
#include <climits>
#include <iostream>

using namespace std;


struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
public:
    int maxPathSum(TreeNode* root) {
        max_sum = INT_MIN;
        maxGain(root);
        return max_sum;
    }

private:
    int max_sum;
    int maxGain(TreeNode* node) {
        if (!node) return 0;
        int left_gain = max(maxGain(node->left), 0);
        int right_gain = max(maxGain(node->right), 0);
        
        int price_newpath = node->val + left_gain + right_gain;
        
        max_sum = max(max_sum, price_newpath);
        
        return node->val + max(left_gain, right_gain);
    }
};

int main() {
 
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);

    Solution solution;
    int max_sum = solution.maxPathSum(root);

    cout << "Max path sum: " << max_sum << endl;

    return 0;
}
