// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
public:
    int maxPathSum(TreeNode* root) {
        maxSum = INT_MIN;
        maxGain(root);
        return maxSum;
    }

private:
    int maxSum;
    int maxGain(TreeNode* node) {
        if (!node) return 0;

        // max sum on the left and right subtree of node
        int leftGain = max(maxGain(node->left), 0);
        int rightGain = max(maxGain(node->right), 0);
        
        // the value of the current node plus maximum path sum of the left and right subtrees
        int priceNewpath = node->val + leftGain + rightGain;
        
        // update maxSum if it's smaller than priceNewpath
        maxSum = max(maxSum, priceNewpath);

        // return the max gain if the node is added to the path
        return node->val + max(leftGain, rightGain);
    }
};
